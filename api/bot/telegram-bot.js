/**
 * Telegram Bot Logic
 */
import {
  createSession,
  getSession,
  addMessage,
  closeSession,
  getActiveChatSession
} from './storage.js';

const TELEGRAM_API = 'https://api.telegram.org';

// Send message to user
export async function sendMessage(botToken, chatId, text, options = {}) {
  const url = `${TELEGRAM_API}/bot${botToken}/sendMessage`;

  const body = {
    chat_id: chatId,
    text,
    parse_mode: options.parseMode || 'Markdown',
    ...options
  };

  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body)
  });

  if (!response.ok) {
    const error = await response.text();
    console.error('Telegram API error:', error);
    throw new Error('Failed to send message');
  }

  return response.json();
}

// Handle /start command
export async function handleStart(botToken, chatId) {
  const message = `
ü§ñ *ElizabethAI Translator Bot*

Bienvenido! Este bot te ayuda a enviar mensajes de Telegram a la app de traducci√≥n.

*C√≥mo usar:*
1Ô∏è‚É£ Env√≠a \`/new\` para crear una nueva sesi√≥n
2Ô∏è‚É£ Reenv√≠a (forward) los mensajes que quieras traducir
3Ô∏è‚É£ Env√≠a \`/done\` cuando termines
4Ô∏è‚É£ Us√° el c√≥digo en la web app: https://traductor-app-two.vercel.app

*Comandos:*
/new - Crear nueva sesi√≥n
/done - Finalizar sesi√≥n actual
/cancel - Cancelar sesi√≥n actual
/help - Ver esta ayuda
`;

  await sendMessage(botToken, chatId, message);
}

// Handle /new command
export async function handleNew(botToken, chatId) {
  // Check if already has active session
  const existingCode = getActiveChatSession(chatId);
  if (existingCode) {
    await sendMessage(
      botToken,
      chatId,
      `‚ö†Ô∏è Ya ten√©s una sesi√≥n activa con c√≥digo: \`${existingCode}\`\n\nEnvi√° /done para finalizarla o /cancel para cancelarla.`
    );
    return;
  }

  // Create new session
  const code = createSession(chatId);

  await sendMessage(
    botToken,
    chatId,
    `‚úÖ *Sesi√≥n creada!*

Tu c√≥digo es: \`${code}\`

Ahora pod√©s:
1Ô∏è‚É£ Reenviar (forward) los mensajes que quer√©s traducir
2Ô∏è‚É£ Cuando termines, envi√° /done
3Ô∏è‚É£ Ingres√° el c√≥digo \`${code}\` en la web app

El c√≥digo expira en 1 hora.
`
  );
}

// Handle /done command
export async function handleDone(botToken, chatId) {
  const code = getActiveChatSession(chatId);

  if (!code) {
    await sendMessage(
      botToken,
      chatId,
      '‚ö†Ô∏è No ten√©s ninguna sesi√≥n activa.\n\nEnvi√° /new para crear una nueva.'
    );
    return;
  }

  const session = getSession(code);
  if (!session) {
    await sendMessage(botToken, chatId, '‚ùå Error: Sesi√≥n no encontrada.');
    return;
  }

  closeSession(code);

  await sendMessage(
    botToken,
    chatId,
    `‚úÖ *Sesi√≥n finalizada!*

C√≥digo: \`${code}\`
Mensajes recibidos: ${session.messages.length}

Ahora ingres√° el c√≥digo en la web app:
https://traductor-app-two.vercel.app
`
  );
}

// Handle /cancel command
export async function handleCancel(botToken, chatId) {
  const code = getActiveChatSession(chatId);

  if (!code) {
    await sendMessage(
      botToken,
      chatId,
      '‚ö†Ô∏è No ten√©s ninguna sesi√≥n activa.'
    );
    return;
  }

  closeSession(code);

  await sendMessage(
    botToken,
    chatId,
    '‚ùå Sesi√≥n cancelada.'
  );
}

// Handle forwarded message
export async function handleForwardedMessage(botToken, chatId, message) {
  const code = getActiveChatSession(chatId);

  if (!code) {
    await sendMessage(
      botToken,
      chatId,
      '‚ö†Ô∏è Primero cre√° una sesi√≥n con /new'
    );
    return;
  }

  const success = addMessage(code, message);

  if (success) {
    const session = getSession(code);
    // Send confirmation with message count
    await sendMessage(
      botToken,
      chatId,
      `‚úÖ Mensaje agregado (${session.messages.length} total)\n\nReenvi√° m√°s mensajes o envi√° /done para finalizar.`
    );
  } else {
    await sendMessage(
      botToken,
      chatId,
      '‚ùå Error al agregar mensaje. La sesi√≥n puede estar cerrada o expirada.'
    );
  }
}

// Handle regular text message (not command, not forwarded)
export async function handleRegularMessage(botToken, chatId) {
  await sendMessage(
    botToken,
    chatId,
    '‚ö†Ô∏è Por favor, reenv√≠a (forward) mensajes en lugar de copiarlos.\n\nO envi√° /help para ver los comandos disponibles.'
  );
}

// Main handler for incoming updates
export async function handleUpdate(botToken, update) {
  const message = update.message;
  if (!message) return;

  const chatId = message.chat.id;
  const text = message.text || '';

  // Handle commands
  if (text.startsWith('/')) {
    const command = text.split(' ')[0].toLowerCase();

    switch (command) {
      case '/start':
      case '/help':
        await handleStart(botToken, chatId);
        break;
      case '/new':
        await handleNew(botToken, chatId);
        break;
      case '/done':
        await handleDone(botToken, chatId);
        break;
      case '/cancel':
        await handleCancel(botToken, chatId);
        break;
      default:
        await sendMessage(botToken, chatId, 'Comando no reconocido. Envi√° /help para ver los comandos disponibles.');
    }
    return;
  }

  // Handle forwarded messages
  if (message.forward_from || message.forward_from_chat) {
    await handleForwardedMessage(botToken, chatId, message);
    return;
  }

  // Regular text message (not command, not forwarded)
  await handleRegularMessage(botToken, chatId);
}
